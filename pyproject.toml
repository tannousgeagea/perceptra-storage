[build-system]
requires = ["setuptools>=68.0", "setuptools-scm>=8.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "perceptra-storage"
version = "0.1.2"
description = "Unified storage adapter interface for multi-cloud storage backends"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Tannous Geagea", email = "tannousgeagea@hotmail.com"}
]
maintainers = [
    {name = "Tannous Geagea", email = "tannousgeagea@hotmail.com"}
]
keywords = [
    "storage",
    "cloud",
    "s3",
    "azure",
    "minio",
    "blob",
    "filesystem",
    "adapter",
    "multi-cloud",
    "computer-vision",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Filesystems",
    "Typing :: Typed",
]

dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
]

[project.optional-dependencies]
# Individual backend dependencies
s3 = [
    "boto3>=1.28.0,<2.0.0",
    "botocore>=1.31.0,<2.0.0",
]
azure = [
    "azure-storage-blob>=12.18.0,<13.0.0",
    "azure-core>=1.29.0,<2.0.0",
]
minio = [
    "minio>=7.2.0,<8.0.0",
    "urllib3>=2.0.0,<3.0.0",
]

# Install all backends
all = [
    "boto3>=1.28.0,<2.0.0",
    "botocore>=1.31.0,<2.0.0",
    "azure-storage-blob>=12.18.0,<13.0.0",
    "azure-core>=1.29.0,<2.0.0",
    "minio>=7.2.0,<8.0.0",
    "urllib3>=2.0.0,<3.0.0",
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pylint>=3.0.0",
    "pre-commit>=3.5.0",
    "tox>=4.11.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
]

# Testing with specific backends
test-s3 = [
    "boto3>=1.28.0,<2.0.0",
    "moto[s3]>=4.2.0",  # Mock AWS services
]
test-azure = [
    "azure-storage-blob>=12.18.0,<13.0.0",
]
test-minio = [
    "minio>=7.2.0,<8.0.0",
]

# Complete development setup
dev-all = [
    "perceptra-storage[all,dev,docs]",
]

[project.urls]
Homepage = "https://github.com/tannousgeagea/perceptra-storage"
Documentation = "https://docs.perceptra.ai/storage"
Repository = "https://github.com/tannousgeagea/perceptra-storage"
Changelog = "https://github.com/tannousgeagea/perceptra-storage/blob/main/CHANGELOG.md"
"Issue Tracker" = "https://github.com/tannousgeagea/perceptra-storage/issues"

[tool.setuptools]
package-dir = {"" = "."}
zip-safe = false

[tool.setuptools.packages.find]
where = ["."]
include = ["perceptra_storage*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
perceptra_storage = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/build/*", "*/dist/*"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "minio.*",
    "azure.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=perceptra_detector --cov-report=html --cov-report=term"

markers = [
    "unit: Unit tests",
    "integration: Integration tests requiring external services",
    "slow: Slow running tests",
    "s3: S3-specific tests",
    "azure: Azure-specific tests",
    "minio: MinIO-specific tests",
    "local: Local filesystem tests",
    "requires_credentials: Tests requiring actual cloud credentials",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["perceptra_storage"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
    "@abc.abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Pylint configuration
[tool.pylint.main]
py-version = "3.9"
jobs = 0
load-plugins = []

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0902",  # Too many instance attributes
    "R0913",  # Too many arguments
    "R0914",  # Too many local variables
    "W0212",  # Access to protected member
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "f", "e", "_", "id", "pk"]

# Tox configuration for multi-environment testing
[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{39,310,311,312}, lint, type-check
isolated_build = true

[testenv]
deps =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-mock>=3.12.0
commands =
    pytest {posargs}

[testenv:py{39,310,311,312}-s3]
deps =
    {[testenv]deps}
    boto3>=1.28.0
    moto[s3]>=4.2.0
commands =
    pytest -m s3 {posargs}

[testenv:py{39,310,311,312}-azure]
deps =
    {[testenv]deps}
    azure-storage-blob>=12.18.0
commands =
    pytest -m azure {posargs}

[testenv:py{39,310,311,312}-minio]
deps =
    {[testenv]deps}
    minio>=7.2.0
commands =
    pytest -m minio {posargs}

[testenv:lint]
deps =
    black>=23.12.0
    isort>=5.13.0
    flake8>=6.1.0
    pylint>=3.0.0
commands =
    black --check perceptra_storage tests
    isort --check-only perceptra_storage tests
    flake8 perceptra_storage tests
    pylint perceptra_storage

[testenv:type-check]
deps =
    mypy>=1.7.0
    boto3-stubs[s3]
commands =
    mypy perceptra_storage

[testenv:docs]
deps =
    sphinx>=7.2.0
    sphinx-rtd-theme>=2.0.0
commands =
    sphinx-build -W -b html docs docs/_build/html
"""